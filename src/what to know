Stateless actors, represented in GPars by the DynamicDispatchActor and the ReactiveActor classes,
do not keep track of what messages have arrived previously.

Stateful actors, on the other hand, represented in GPars by the DefaultActor class, allow the actor
to handle the implicit state directly. After receiving a message, the actor moves into
a new state with different set of handlers to handle future messages.


A stateful actor doesn't provide independent message handlers. Instead, a stateful actor defines a body â€” a block of
code to execute when the actor starts. Inside the body, the actor may check for messages any time by calling the react
method. Depending on the actual message contents, the actor executes different actions.



In stateful
Once started, actors run their body top to bottom, reading messages from their mail-boxes along the way.
Inside the actor's body you can use loop() to iterate, react() to receive messages, and reply()
to send a reply to the currently processed message.
Notice the implicit state transitions of the actor.
 The first message that arrives is handled by a different handler than the second message in the sequence.




Continuations

A stateful actor's code is processed in chunks, separated by quiet periods of waiting for new events (messages). This
can be naturally modeled through continuations.

 However, since JVM doesn't support continuations directly, they have to
be simulated in the actor frameworks, which has a slight impact on organization of the actors' code.

Calling the react() method from within the actor's code has slightly different semantics than just reading the next
message from the actor's inbox.
Under the covers, the closure supplied as a parameter to the react method is scheduled for processing once a
message becomes available.


 The scheduling is the last work the current thread does on the actor's behalf.

  Once scheduled, the thread is detached from the actor and returned to the pool to serve other actors. To allow detaching
actors from the threads, the react() method requires that the code to be written in a special "Continuation-style."



Essentially, react() schedules the supplied code (closure) to be executed upon next message arrival and quits the actor
body. The closure supplied to the react() methods is the code where the computation should continue. Thus, we have
continuation style. The loop() method allows iteration within the actor body. Unlike typical looping constructs, loop()
cooperates with nested react() blocks and ensures looping across subsequent message retrievals.



Messages can be sent to actors using the send() method.send method returns this instead of reply

A family of sendAndWait() methods is available to block the caller until a reply from the actor is available.
 The reply is returned from the sendAndWait() method as a return value.
 The sendAndWait() methods may also return after a timeout expires or
 in case of termination of the called actor.


The sendAndContinue() method allows the caller to continue its processing while the supplied closure is waiting for a reply from the actor.



DynamicicDispatch is eseentially used when you have to send back diffrent kind of messages

For react

Under the covers the supplied closure is not invoked directly,
 but scheduled for processing by any thread in the thread pool once a message is available.
 After scheduling the current thread will then be detached from the actor and freed to process any other actor,
  which has received a message already.

To allow detaching actors from the threads the react() method demands the code to be written in a special
Continuation-style.

react() method has a special semantics to allow actors to be detached from threads when no messages are available in
their mailbox. Essentially, react() schedules the supplied code (closure) to be executed upon next message arrival and
returns. The closure supplied to the react() methods is the code where the computation should continue . Thus
continuation style .

Since actor has to preserve the guarantee of at most one thread active within the actor's body,
the next message cannot be handled before the current message processing finishes.
Typically, there shouldn't be a need to put code after calls to react() .

Some actor implementations even enforce this, however, GPars does not for performance reasons.

The loop() method allows iteration within the actor body. Unlike typical looping constructs,
 like for or while loops, loop() cooperates with nested react() blocks and will ensure looping across
  subsequent message retrievals.

Creating Actors

Actors share a pool of threads, which are dynamically assigned to actors when the actors need to react to messages sent
to them. The threads are returned to back the pool once a message has been processed and the actor is idle waiting for
some more messages to arrive.

Notice the loop() method call, which ensures that the actor doesn't stop after having processed the first message.

join is also used for graceful termination and shows result especially inn case of two looped actor


class Bank extends WithId {
    void act() {
        loop {
            react { Integer amount ->
                reply "Amount $amount has been stored in -- ${sender} --"
                //stop()
            }
        }
    }
}
class BankBranch extends WithId {
    void act() {
        loop {
            //as per previous examples we can guess this is the sender or intiatoir who may have send request for cash
            // and the reciever is the bank who will listen the request and send the money
            react { String message ->
                println message
            }
        }
    }
}
/*


To stop above execution just put stop in comments as has been done